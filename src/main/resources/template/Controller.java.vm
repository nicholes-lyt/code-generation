package ${package}.controller;
import java.util.HashMap;
import java.util.Map;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.commons.lang3.StringUtils;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import ${package}.vo.${className}VO;
import ${package}.vo.${className}SaveOrupdateVO;
import ${package}.service.${className}Service;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import springfox.documentation.annotations.ApiIgnore;

import com.rograndec.feijiayun.chain.common.Page;
import com.rograndec.feijiayun.chain.common.Result;
import com.rograndec.feijiayun.chain.common.SysCode;
import com.rograndec.feijiayun.chain.common.vo.UserVO;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.validation.Valid;

import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.net.URLEncoder;

 /**
 * 
 * @ClassName: ${className}Controller   
 * @Description:  ${comments}-Rest接口
 * @author ${author}
 * @version 1.0 
 * @date ${datetime}
 */
@Api(value="${className}Controller",description = "${comments}")
@RestController
@RequestMapping("${pathName}")
public class ${className}Controller {

	private static final Logger logger = LoggerFactory.getLogger(${className}Controller.class);
	
	@Autowired
	private ${className}Service ${classname}Service;
		

	
	@ApiOperation(value = "${comments}分页列表", notes = "获取数据 | 开发者 ${author} | 开发中", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@RequestMapping(value = "/get${className}ByParam", method = RequestMethod.GET)
	public Result<Page> get${className}ByParam(HttpSession session,
	@ApiParam(value = "页码", required = true) @RequestParam int pageNo,
	@ApiParam(value = "每页显示的记录数", required = true) @RequestParam int pageSize) throws Exception {
		Result<Page> result = new Result<>();
        try {
        	if(pageNo <= 0 || pageSize <= 0){
        		result.setBizCodeFallInfo(SysCode.SYS_PARAM_ERROR);
    			return result;
        	}
        	Page page = new Page(pageNo, pageSize);
        	
        	// 当前登录用户数据
            UserVO userVO = (UserVO) session.getAttribute("user");
            List<${className}VO> list = new ArrayList<>();
            page.setResult(list);
            result.setBizCodeSuccessInfo(SysCode.SUCCESS, page);
        } catch (Exception e) {
            logger.error("获取${comments}数据失败:", e);
            result.setBizCodeFallInfo(SysCode.FAIL);
            return result;
        }
        return result;
	}
	
	@ApiOperation(value = "查看${comments}", notes = "查看数据 | 开发者 yuting.li | 开发中", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@RequestMapping(value = "/get${className}", method = RequestMethod.GET)
	public Result<List<${className}VO>> get${className}Data(HttpSession session) throws Exception {
		Result<List<${className}VO>> result = new Result<>();
        try {
        	// 当前登录用户数据
            UserVO userVO = (UserVO) session.getAttribute("user");
            List<${className}VO> list = ${classname}Service.get${className}Data(userVO);
            result.setBizCodeSuccessInfo(SysCode.SUCCESS, list);
        } catch (Exception e) {
            logger.error("查看${comments}数据失败:", e);
            result.setBizCodeFallInfo(SysCode.FAIL);
            return result;
        }
        return result;
	}
		
	@ApiOperation(value = "添加${comments}", notes = "添加数据 | 开发者 ${author} | 开发中", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public Result<String> save(HttpSession session,@Valid @RequestBody ${className}SaveOrupdateVO ${classname}) {
		Result<String> result = new Result<>();
        try {
        	// 当前登录用户数据
            UserVO userVO = (UserVO) session.getAttribute("user");
            ${classname}Service.save(${classname},userVO);
            result.setBizCodeSuccessInfo(SysCode.SUCCESS,"添加成功");
        } catch (Exception e) {
            logger.error("添加${comments}数据失败:", e);
            result.setBizCodeFallInfo(SysCode.FAIL);
            return result;
        }
        return result;
	}
	
	@ApiOperation(value = "更新${comments}", notes = "更新数据 | 开发者 ${author} | 开发中", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public Result<String> update(HttpSession session,@Valid @RequestBody ${className}SaveOrupdateVO ${classname}) {
		Result<String> result = new Result<>();
        try {
        	// 当前登录用户数据
            UserVO userVO = (UserVO) session.getAttribute("user");
            int upresult = ${classname}Service.update(${classname},userVO);
            result.setBizCodeSuccessInfo(SysCode.SUCCESS,upresult == 1 ? "更新成功" : "更新数据不存在");
        } catch (Exception e) {
            logger.error("更新${comments}数据失败:", e);
            result.setBizCodeFallInfo(SysCode.FAIL);
            return result;
        }
        return result;
	}
	
	@ApiOperation(value = "根据ID删除${comments}", notes = "删除数据 | 开发者 ${author} | 开发中", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public Result<Object> remove(HttpSession session,@ApiParam(value = "根据id删除", required = true)@RequestParam(name = "id", required = true) String id) {
		Result<Object> result = new Result<>();
		if(StringUtils.isBlank(id)) {
			result.setBizSetCodeFallInfo(SysCode.SYS_PARAM_ERROR, "id不能为空！");
            return result;
		}
        try {
        	// 当前登录用户数据
            UserVO userVO = (UserVO) session.getAttribute("user");
            int delresult = ${classname}Service.delete(Long.valueOf(id));
            result.setBizCodeSuccessInfo(SysCode.SUCCESS,delresult == 1 ? "删除成功" : "删除数据不存在");
        } catch (Exception e) {
            logger.error("删除${comments}数据失败:", e);
            result.setBizCodeFallInfo(SysCode.FAIL);
            return result;
        }
        return result;
	}
	
	@ApiOperation(value = "导出${comments}", notes = "导出数据 | 开发者 ${author} | 开发中")
    @RequestMapping(value = "/excelExport", method = RequestMethod.GET, produces = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public void excelExport(HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException {
        String name = "xxx导出";
        try {
	        response.setContentType("application/msexcel;charset=utf-8");
	        response.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(name, "UTF-8")+".xlsx");
	        //输出Excel文件
	        OutputStream output = null;
        	
        	HttpSession session = request.getSession(true);
        	UserVO loginUser = (UserVO) session.getAttribute("user");
        	
        	List list = new ArrayList();
            output = response.getOutputStream();
            //
            output.close();
            output.flush();
        } catch (Exception e) {
        	logger.error("导出${comments}错误:"+e.getMessage(),e);
            e.printStackTrace();
        }
        
    }
	
}
